#!/usr/bin/env node
'use strict';

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _package = require('../../package');

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

var _path = require('path');

var _babelPresetEs = require('babel-preset-es2015');

var _babelPresetEs2 = _interopRequireDefault(_babelPresetEs);

var _babelPluginSyntaxAsyncFunctions = require('babel-plugin-syntax-async-functions');

var _babelPluginSyntaxAsyncFunctions2 = _interopRequireDefault(_babelPluginSyntaxAsyncFunctions);

var _babelPluginTransformAsyncToGenerator = require('babel-plugin-transform-async-to-generator');

var _babelPluginTransformAsyncToGenerator2 = _interopRequireDefault(_babelPluginTransformAsyncToGenerator);

var _babelPluginTransformRuntime = require('babel-plugin-transform-runtime');

var _babelPluginTransformRuntime2 = _interopRequireDefault(_babelPluginTransformRuntime);

var _babelPluginModuleAlias = require('babel-plugin-module-alias');

var _babelPluginModuleAlias2 = _interopRequireDefault(_babelPluginModuleAlias);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.version(_package.version).option('-p, --port <port>', 'Port to listen on (3000)', parseInt).option('-n, --no-babel', 'Skip Babel transformation').parse(process.argv);

// babel
// relative to `build` :/


var file = _commander2.default.args[_commander2.default.args.length - 1];

if (!file) {
  console.error('\n> \u001b[31mError!\u001b[39m Please supply a file.');
  _commander2.default.outputHelp();
  process.exit(1);
}

if ('/' !== file[0]) {
  file = (0, _path.resolve)(process.cwd(), file);
}

if (_commander2.default.babel) {
  // FIXME: is there a better way to point the `babel-runtime`
  // to the runtime contained in the micro installation?
  var path = require.resolve('babel-runtime/package').replace(/[\\\/]package.json$/, '');

  require('babel-register')({
    presets: [_babelPresetEs2.default],
    plugins: [_babelPluginSyntaxAsyncFunctions2.default, _babelPluginTransformAsyncToGenerator2.default, _babelPluginTransformRuntime2.default, [_babelPluginModuleAlias2.default, [{ src: path, expose: 'babel-runtime' }]]]
  });
}

var mod = require(file).default;

if ('function' !== typeof mod) {
  console.error('> \u001b[31mError!\u001b[39m "' + file + '" does not export a function.');
  process.exit(1);
}

var port = _commander2.default.port || 3000;
(0, _lib2.default)(mod).listen(port, function (err) {
  if (err) {
    console.error(err.stack);
    process.exit(1);
  }

  console.log('> \u001b[96mReady!\u001b[39m Listening on ' + port + '.');
});

// TODO: test listen error
// add success message